{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input-image",
  "type": "registry:block",
  "title": "Input Image",
  "description": "画像を選択できるコンポーネント",
  "dependencies": [
    "react-avatar-editor",
    "react-dropzone"
  ],
  "registryDependencies": [
    "button",
    "dialog",
    "slider"
  ],
  "files": [
    {
      "path": "registry/new-york/input-image/input-image.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { cn } from \"@/lib/utils\";\nimport { ImagePlus, X } from \"lucide-react\";\nimport Image from \"next/image\";\nimport { useRef, useState } from \"react\";\nimport AvatarEditor from \"react-avatar-editor\";\nimport { useDropzone } from \"react-dropzone\";\n\ntype Props = {\n  testid?: string;\n  /**\n   * Width of the preview area\n   */\n  width?: string | number;\n  /**\n   * Aspect ratio of the image\n   * */\n  aspectRatio?: number;\n  /**\n   * Width after cropping\n   * */\n  resultWidth: number;\n  /**\n   * Value of the image\n   */\n  value: string | null | undefined;\n  /**\n   * Callback function when the image is changed\n   */\n  onChange: (value: string) => void;\n  /**\n   * Max size of the input image.\n   * Default is 4MB.\n   */\n  maxSize?: number;\n};\n\nexport function InputImage({\n  width = \"100%\",\n  aspectRatio = 1,\n  maxSize = 1024 * 1024 * 4, // 4MB\n  resultWidth,\n  value = \"\",\n  onChange,\n}: Props) {\n  const editor = useRef<AvatarEditor>(null);\n  const { getRootProps, getInputProps, isDragAccept } = useDropzone({\n    maxSize,\n    multiple: false,\n    accept: {\n      \"image/jpeg\": [],\n      \"image/png\": [],\n      \"image/webp\": [],\n    },\n    useFsAccessApi: false,\n    onDropAccepted: (dropped) => {\n      setImage(dropped[0]);\n      setScale(1.0);\n      setOpen(true);\n    },\n  });\n  const [image, setImage] = useState<File>();\n  const [scale, setScale] = useState(1.0);\n  const [open, setOpen] = useState(false);\n\n  const cropImage = async () => {\n    const dataUrl = editor.current?.getImage().toDataURL(\"image/jpeg\");\n    const result = await resizeBase64Img(\n      dataUrl!,\n      resultWidth,\n      resultWidth / aspectRatio,\n    );\n    setOpen(false);\n    onChange(result);\n  };\n\n  return (\n    <div>\n      <div className=\"relative w-fit\">\n        <div\n          className={cn(\n            \"border overflow-hidden cursor-pointer rounded-md grid place-content-center relative\",\n            \"focus-within:ring-2 focus-within:ring-ring focus-within:ring-offset-2 focus-within:outline-none ring-offset-background\",\n            isDragAccept ? \"bg-primary scale-150\" : \"bg-muted\",\n          )}\n          style={{\n            aspectRatio,\n            width,\n          }}\n          {...getRootProps()}\n        >\n          {!value && (\n            <ImagePlus className=\"w-10 h-10 text-muted-foreground opacity-30\" />\n          )}\n          {value && (\n            <Image\n              unoptimized\n              className=\"object-cover\"\n              fill\n              src={value}\n              alt=\"\"\n            />\n          )}\n          <input {...getInputProps()} />\n          <span className=\"sr-only\">画像を選択</span>\n        </div>\n\n        {value && (\n          <Button\n            type=\"button\"\n            className=\"absolute top-2 right-2 size-8\"\n            size=\"icon\"\n            onClick={() => {\n              onChange(\"\");\n            }}\n          >\n            <X size={20} />\n            <span className=\"sr-only\">イメージを削除</span>\n          </Button>\n        )}\n      </div>\n\n      <Dialog open={open} onOpenChange={(status) => setOpen(status)}>\n        <DialogTitle className=\"sr-only\">イメージを切り抜く</DialogTitle>\n        <DialogContent className=\"max-w-md\">\n          <div\n            className=\"border relative overflow-hidden rounded-lg\"\n            style={{\n              aspectRatio,\n            }}\n          >\n            {image && (\n              <AvatarEditor\n                className=\"absolute max-w-full max-h-full inset-0\"\n                scale={scale}\n                ref={editor}\n                width={1000}\n                height={1000 / aspectRatio}\n                image={image}\n              />\n            )}\n          </div>\n\n          <div className=\"my-4\">\n            <Slider\n              max={2}\n              step={0.01}\n              min={1}\n              defaultValue={[1]}\n              onValueChange={([value]) => setScale(value)}\n            />\n          </div>\n\n          <div className=\"flex gap-2 justify-end\">\n            <DialogClose asChild>\n              <Button variant=\"outline\">閉じる</Button>\n            </DialogClose>\n            <Button autoFocus onClick={cropImage}>\n              切り取る\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\nfunction resizeBase64Img(base64: string, width: number, height: number) {\n  return new Promise<string>((resolve, reject) => {\n    const img = document.createElement(\"img\");\n\n    img.onload = function () {\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = width;\n      canvas.height = height;\n      const ctx = canvas.getContext(\"2d\");\n      ctx!.drawImage(img, 0, 0, width, height);\n      resolve(canvas.toDataURL(\"image/jpeg\"));\n    };\n\n    img.onerror = function (err) {\n      reject(err);\n    };\n\n    img.src = base64;\n  });\n}\n",
      "type": "registry:component"
    }
  ],
  "docs": "Please install @types/react-avatar-editor as a dev dependency to use this component.\n\npnpm add -D @types/react-avatar-editor"
}